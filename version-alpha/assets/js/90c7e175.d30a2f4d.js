"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1120],{58060:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>xe,contentTitle:()=>ue,default:()=>fe,frontMatter:()=>de,metadata:()=>r,toc:()=>ge});const r=JSON.parse('{"id":"components/line-chart/code","title":"code","description":"Development","source":"@site/docs/components/line-chart/code.mdx","sourceDirName":"components/line-chart","slug":"/components/line-chart/code","permalink":"/version-alpha/docs/components/line-chart/code","draft":false,"unlisted":false,"editUrl":"https://github.com/siemens/ix/tree/main/packages/documentation/docs/components/line-chart/code.mdx","tags":[],"version":"current","frontMatter":{}}');var s=t(65723),i=t(65598),a=t(89403);function o(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import './echarts-line-simple.scoped.css';\n\nimport { useEffect, useState } from 'react';\nimport { registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\nexport default function EchartsLineSimple() {\n  registerTheme(echarts);\n\n  const [theme, setTheme] = useState(themeSwitcher.getCurrentTheme());\n\n  useEffect(() => {\n    themeSwitcher.themeChanged.on((theme: string) => {\n      setTheme(theme);\n    });\n  }, []);\n\n  const data = {\n    weekdays: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    value: [150, 230, 224, 218, 135, 147, 260],\n  };\n\n  const options: EChartsOption = {\n    xAxis: {\n      type: 'category',\n      data: data.weekdays,\n    },\n    yAxis: {\n      type: 'value',\n    },\n    series: [\n      {\n        data: data.value,\n        type: 'line',\n      },\n    ],\n  };\n\n  return (\n    <ReactEcharts\n      style={{ height: '40rem' }}\n      option={options}\n      theme={theme}\n      className=\"echarts\"\n    />\n  );\n}\n"})})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}function h(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function m(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Component, OnInit } from '@angular/core';\nimport { registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './echarts-line-simple.html',\n  styleUrls: ['./echarts-line-simple.css'],\n})\nexport default class EchartsLineSimple implements OnInit {\n  theme = themeSwitcher.getCurrentTheme();\n\n  data = {\n    weekdays: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    value: [150, 230, 224, 218, 135, 147, 260],\n  };\n\n  value = 60;\n\n  options: EChartsOption = {\n    xAxis: {\n      type: 'category',\n      data: this.data.weekdays,\n    },\n    yAxis: {\n      type: 'value',\n    },\n    series: [\n      {\n        data: this.data.value,\n        type: 'line',\n      },\n    ],\n  };\n\n  ngOnInit() {\n    registerTheme(echarts);\n\n    themeSwitcher.themeChanged.on((theme: string) => {\n      this.theme = theme;\n    });\n  }\n}\n"})})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}function d(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div\n  echarts\n  [options]="options"\n  [theme]="theme"\n  class="echarts"\n></div>\n'})})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function x(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}function y(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport VueECharts from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport * as charts from 'echarts/charts';\nimport * as components from 'echarts/components';\nimport * as renderer from 'echarts/renderers';\nimport { EChartsOption } from 'echarts';\n\necharts.use([\n  components.TooltipComponent,\n  components.LegendComponent,\n  components.GridComponent,\n  components.MarkLineComponent,\n  charts.LineChart,\n  renderer.CanvasRenderer,\n]);\n\nregisterTheme(echarts);\n\nconst theme = ref(themeSwitcher.getCurrentTheme());\n\nthemeSwitcher.themeChanged.on((newTheme: string) => {\n  theme.value = newTheme;\n});\n\nconst data = {\n  weekdays: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n  value: [150, 230, 224, 218, 135, 147, 260],\n};\n\nconst value = 60;\n\nconst options = {\n  xAxis: {\n    type: 'category',\n    data: data.weekdays,\n  },\n  yAxis: {\n    type: 'value',\n  },\n  series: [\n    {\n      data: data.value,\n      type: 'line',\n    },\n  ],\n} as EChartsOption;\n<\/script>\n\n<style scoped src=\"./echarts-line-simple.css\"></style>\n\n<template>\n  <VueECharts :theme=\"theme\" :option=\"options\" autoresize></VueECharts>\n</template>\n"})})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(y,{...e})}):y(e)}function v(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function C(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(v,{...e})}):v(e)}function S(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ECharts line simple example</title>\n    <link rel=\"stylesheet\" href=\"./echarts-line-simple.css\" />\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"><\/script>\n    \n  </head>\n  <body class=\"theme-classic-dark\">\n    <div id=\"main\" class=\"echarts\"></div>\n\n    <script type=\"module\">\n      import { registerTheme } from '@siemens/ix-echarts';\n      import { themeSwitcher } from '@siemens/ix';\n\n      function initChart(theme, options) {\n        var myChart = echarts.init(document.querySelector('#main'), theme);\n        myChart.setOption(options);\n\n        return myChart;\n      }\n\n      const data = {\n        weekdays: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n        value: [150, 230, 224, 218, 135, 147, 260],\n      };\n\n      const options = {\n        xAxis: {\n          type: 'category',\n          data: data.weekdays,\n        },\n        yAxis: {\n          type: 'value',\n        },\n        series: [\n          {\n            data: data.value,\n            type: 'line',\n          },\n        ],\n      };\n\n      // providing echarts is in this case optional\n      registerTheme(echarts);\n\n      var myChart = initChart(themeSwitcher.getCurrentTheme(), options);\n\n      themeSwitcher.themeChanged.on((theme) => {\n        myChart.dispose();\n        myChart = initChart(theme, options);\n      });\n\n      window.onresize = function () {\n        myChart.resize();\n      };\n    <\/script>\n\n    <script type=\"module\" src=\"./init.js\"><\/script>\n  </body>\n</html>\n"})})}function j(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(S,{...e})}):S(e)}function w(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function A(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(w,{...e})}):w(e)}function T(e){return(0,s.jsx)(a.A,{name:"echarts-line-simple",source:{react:{"echarts-line-simple.tsx":c,"echarts-line-simple.scoped.css":l},angular:{"echarts-line-simple.ts":p,"echarts-line-simple.html":u,"echarts-line-simple.css":g},vue:{"echarts-line-simple.vue":f,"echarts-line-simple.css":C},html:{"echarts-line-simple.html":j,"echarts-line-simple.css":A}},files:{react:{"echarts-line-simple.tsx":"react/echarts-line-simple.tsx","echarts-line-simple.scoped.css":"react/echarts-line-simple.scoped.css"},angular:{"echarts-line-simple.ts":"angular/echarts-line-simple.ts","echarts-line-simple.html":"angular/echarts-line-simple.html","echarts-line-simple.css":"angular/echarts-line-simple.css"},vue:{"echarts-line-simple.vue":"vue/echarts-line-simple.vue","echarts-line-simple.css":"vue/echarts-line-simple.css"},html:{"echarts-line-simple.html":"html/echarts-line-simple.html","echarts-line-simple.css":"html/echarts-line-simple.css"}},height:e.height,onlyFramework:e.onlyFramework})}function L(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}function R(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import './echarts-line-multiple-y-axis.scoped.css';\n\nimport { useEffect, useState } from 'react';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption, SeriesOption } from 'echarts';\nimport { YAXisOption } from 'echarts/types/dist/shared';\n\nexport default function EchartsLineMultipleYAxis() {\n  registerTheme(echarts);\n\n  const [theme, setTheme] = useState(themeSwitcher.getCurrentTheme());\n\n  useEffect(() => {\n    themeSwitcher.themeChanged.on((theme: string) => {\n      setTheme(theme);\n    });\n  }, []);\n\n  const months = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  const data = {\n    evaporation: months.map(() => (Math.random() * 100).toFixed(2)),\n    precipitation: months.map(() => (Math.random() * 200).toFixed(2)),\n    temperature: months.map(() => (Math.random() * 30).toFixed(2)),\n  };\n\n  const themeChartList = Array.from({ length: 17 }, (_, i) =>\n    getComputedCSSProperty(`chart-${i + 1}`)\n  );\n\n  function createYAxis(\n    name: string,\n    position: 'left' | 'right',\n    color: string,\n    formatter: string,\n    offset: number = 0\n  ): YAXisOption {\n    return {\n      type: 'value',\n      name: name,\n      position: position,\n      offset: offset,\n      alignTicks: true,\n      axisLabel: {\n        formatter: formatter,\n      },\n      axisTick: {\n        lineStyle: {\n          color: color,\n        },\n      },\n      axisLine: {\n        lineStyle: {\n          color: color,\n        },\n      },\n    };\n  }\n\n  function createSeries(\n    name: string,\n    yAxisIndex: number,\n    data: any,\n    color: string\n  ): SeriesOption {\n    return {\n      name: name,\n      type: 'line',\n      yAxisIndex: yAxisIndex,\n      data: data,\n      lineStyle: {\n        color: color,\n      },\n      itemStyle: {\n        color: color,\n      },\n    };\n  }\n\n  const options: EChartsOption = {\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: { type: 'cross' },\n    },\n    grid: {\n      right: '20%',\n    },\n    legend: {\n      show: true,\n      bottom: '0',\n      left: '0',\n    },\n    xAxis: [\n      {\n        type: 'category',\n        axisTick: { alignWithLabel: true },\n        data: months,\n      },\n    ],\n    yAxis: [\n      createYAxis('Evaporation', 'right', themeChartList[0], '{value} ml'),\n      createYAxis(\n        'Precipitation',\n        'right',\n        themeChartList[7],\n        '{value} ml',\n        80\n      ),\n      createYAxis('Temperature', 'left', themeChartList[12], '{value} \xb0C'),\n    ],\n    series: [\n      createSeries('Evaporation', 0, data.evaporation, themeChartList[0]),\n      createSeries('Precipitation', 1, data.precipitation, themeChartList[7]),\n      createSeries('Temperature', 2, data.temperature, themeChartList[12]),\n    ],\n  };\n\n  return <ReactEcharts option={options} theme={theme} className=\"echarts\" />;\n}\n"})})}function b(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(R,{...e})}):R(e)}function k(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function E(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(k,{...e})}):k(e)}function O(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Component, OnInit } from '@angular/core';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption, SeriesOption } from 'echarts';\nimport { YAXisOption } from 'echarts/types/dist/shared';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './echarts-line-multiple-y-axis.html',\n  styleUrls: ['./echarts-line-multiple-y-axis.css'],\n})\nexport default class EchartsLineMultipleYAxis implements OnInit {\n  theme = themeSwitcher.getCurrentTheme();\n\n  dates = Array.from({ length: 2025 - 2013 }, (_, i) => (2013 + i).toString());\n\n  months = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  data = {\n    evaporation: this.months.map(() => (Math.random() * 100).toFixed(2)),\n    precipitation: this.months.map(() => (Math.random() * 200).toFixed(2)),\n    temperature: this.months.map(() => (Math.random() * 30).toFixed(2)),\n  };\n\n  themeChartList = Array.from({ length: 17 }, (_, i) =>\n    getComputedCSSProperty(`chart-${i + 1}`)\n  );\n\n  createYAxis(\n    name: string,\n    position: 'left' | 'right',\n    color: string,\n    formatter: string,\n    offset: number = 0\n  ): YAXisOption {\n    return {\n      type: 'value',\n      name: name,\n      position: position,\n      offset: offset,\n      alignTicks: true,\n      axisLabel: {\n        formatter: formatter,\n      },\n      axisTick: {\n        lineStyle: {\n          color: color,\n        },\n      },\n      axisLine: {\n        lineStyle: {\n          color: color,\n        },\n      },\n    };\n  }\n\n  createSeries(\n    name: string,\n    yAxisIndex: number,\n    data: any,\n    color: string\n  ): SeriesOption {\n    return {\n      name: name,\n      type: 'line',\n      yAxisIndex: yAxisIndex,\n      data: data,\n      lineStyle: {\n        color: color,\n      },\n      itemStyle: {\n        color: color,\n      },\n    };\n  }\n\n  options: EChartsOption = {\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: { type: 'cross' },\n    },\n    grid: {\n      right: '20%',\n    },\n    legend: {\n      show: true,\n      bottom: '0',\n      left: '0',\n    },\n    xAxis: [\n      {\n        type: 'category',\n        axisTick: { alignWithLabel: true },\n        data: this.months,\n      },\n    ],\n    yAxis: [\n      this.createYAxis(\n        'Evaporation',\n        'right',\n        this.themeChartList[0],\n        '{value} ml'\n      ),\n      this.createYAxis(\n        'Precipitation',\n        'right',\n        this.themeChartList[7],\n        '{value} ml',\n        80\n      ),\n      this.createYAxis(\n        'Temperature',\n        'left',\n        this.themeChartList[12],\n        '{value} \xb0C'\n      ),\n    ],\n    series: [\n      this.createSeries(\n        'Evaporation',\n        0,\n        this.data.evaporation,\n        this.themeChartList[0]\n      ),\n      this.createSeries(\n        'Precipitation',\n        1,\n        this.data.precipitation,\n        this.themeChartList[7]\n      ),\n      this.createSeries(\n        'Temperature',\n        2,\n        this.data.temperature,\n        this.themeChartList[12]\n      ),\n    ],\n  };\n\n  ngOnInit() {\n    registerTheme(echarts);\n\n    themeSwitcher.themeChanged.on((theme: string) => {\n      this.theme = theme;\n    });\n  }\n}\n"})})}function M(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(O,{...e})}):O(e)}function P(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div\n  echarts\n  [options]="options"\n  [theme]="theme"\n  class="echarts"\n></div>\n'})})}function N(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(P,{...e})}):P(e)}function D(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function F(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(D,{...e})}):D(e)}function Y(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport VueECharts from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport * as charts from 'echarts/charts';\nimport * as components from 'echarts/components';\nimport * as renderer from 'echarts/renderers';\nimport { EChartsOption, SeriesOption } from 'echarts';\nimport { YAXisOption } from 'echarts/types/dist/shared';\n\necharts.use([\n  components.TooltipComponent,\n  components.LegendComponent,\n  components.GridComponent,\n  components.MarkLineComponent,\n  charts.LineChart,\n  renderer.CanvasRenderer,\n]);\n\nregisterTheme(echarts);\n\nconst theme = ref(themeSwitcher.getCurrentTheme());\n\nconst dates = Array.from({ length: 2025 - 2013 }, (_, i) =>\n  (2013 + i).toString()\n);\n\nconst months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nconst data = {\n  evaporation: months.map(() => (Math.random() * 100).toFixed(2)),\n  precipitation: months.map(() => (Math.random() * 200).toFixed(2)),\n  temperature: months.map(() => (Math.random() * 30).toFixed(2)),\n};\n\nconst themeChartList = Array.from({ length: 17 }, (_, i) =>\n  getComputedCSSProperty(`chart-${i + 1}`)\n);\n\nfunction createYAxis(\n  name: string,\n  position: 'left' | 'right',\n  color: string,\n  formatter: string,\n  offset: number = 0\n): YAXisOption {\n  return {\n    type: 'value',\n    name: name,\n    position: position,\n    offset: offset,\n    alignTicks: true,\n    axisLabel: {\n      formatter: formatter,\n    },\n    axisTick: {\n      lineStyle: {\n        color: color,\n      },\n    },\n    axisLine: {\n      lineStyle: {\n        color: color,\n      },\n    },\n  };\n}\n\nfunction createSeries(\n  name: string,\n  yAxisIndex: number,\n  data: any,\n  color: string\n): SeriesOption {\n  return {\n    name: name,\n    type: 'line',\n    yAxisIndex: yAxisIndex,\n    data: data,\n    lineStyle: {\n      color: color,\n    },\n    itemStyle: {\n      color: color,\n    },\n  } as SeriesOption;\n}\n\nconst options: EChartsOption = {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'cross' },\n  },\n  grid: {\n    right: '20%',\n  },\n  legend: {\n    show: true,\n    bottom: '0',\n    left: '0',\n  },\n  xAxis: [\n    {\n      type: 'category',\n      axisTick: { alignWithLabel: true },\n      data: months,\n    },\n  ],\n  yAxis: [\n    createYAxis('Evaporation', 'right', themeChartList[0], '{value} ml'),\n    createYAxis('Precipitation', 'right', themeChartList[7], '{value} ml', 80),\n    createYAxis('Temperature', 'left', themeChartList[12], '{value} \xb0C'),\n  ],\n  series: [\n    createSeries('Evaporation', 0, data.evaporation, themeChartList[0]),\n    createSeries('Precipitation', 1, data.precipitation, themeChartList[7]),\n    createSeries('Temperature', 2, data.temperature, themeChartList[12]),\n  ],\n} as EChartsOption;\n<\/script>\n\n<style scoped src=\"./echarts-line-multiple-y-axis.css\"></style>\n\n<template>\n  <VueECharts :theme=\"theme\" :option=\"options\" autoresize></VueECharts>\n</template>\n"})})}function I(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(Y,{...e})}):Y(e)}function z(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function J(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(z,{...e})}):z(e)}function W(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ECharts line multiple y-axis example</title>\n    <link rel=\"stylesheet\" href=\"./echarts-line-multiple-y-axis.css\" />\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"><\/script>\n    \n  </head>\n  <body class=\"theme-classic-dark\">\n    <div id=\"main\" class=\"echarts\"></div>\n\n    <script type=\"module\">\n      import {\n        getComputedCSSProperty,\n        registerTheme,\n      } from '@siemens/ix-echarts';\n      import { themeSwitcher } from '@siemens/ix';\n\n      function initChart(theme, options) {\n        var myChart = echarts.init(document.querySelector('#main'), theme);\n        myChart.setOption(options);\n\n        return myChart;\n      }\n\n      const months = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n\n      const data = {\n        evaporation: months.map(() => (Math.random() * 100).toFixed(2)),\n        precipitation: months.map(() => (Math.random() * 200).toFixed(2)),\n        temperature: months.map(() => (Math.random() * 30).toFixed(2)),\n      };\n\n      const themeChartList = Array.from({ length: 17 }, (_, i) =>\n        getComputedCSSProperty(`chart-${i + 1}`)\n      );\n\n      function createYAxis(name, position, color, formatter, offset) {\n        return {\n          type: 'value',\n          name: name,\n          position: position,\n          offset: offset,\n          axisLabel: {\n            formatter: formatter,\n          },\n          axisTick: {\n            lineStyle: {\n              color: color,\n            },\n          },\n          axisLine: {\n            lineStyle: {\n              color: color,\n            },\n          },\n        };\n      }\n\n      function createSeries(name, yAxisIndex, data, color) {\n        return {\n          name: name,\n          type: 'line',\n          yAxisIndex: yAxisIndex,\n          data: data,\n          lineStyle: {\n            color: color,\n          },\n          itemStyle: {\n            color: color,\n          },\n        };\n      }\n\n      const options = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: { type: 'cross' },\n        },\n        grid: {\n          right: '20%',\n        },\n        legend: {\n          show: true,\n          bottom: '0',\n          left: '0',\n        },\n        xAxis: [\n          {\n            type: 'category',\n            axisTick: { alignWithLabel: true },\n            data: months,\n          },\n        ],\n        yAxis: [\n          createYAxis('Evaporation', 'right', themeChartList[0], '{value} ml'),\n          createYAxis(\n            'Precipitation',\n            'right',\n            themeChartList[7],\n            '{value} ml',\n            80\n          ),\n          createYAxis('Temperature', 'left', themeChartList[12], '{value} \xb0C'),\n        ],\n        series: [\n          createSeries('Evaporation', 0, data.evaporation, themeChartList[0]),\n          createSeries(\n            'Precipitation',\n            1,\n            data.precipitation,\n            themeChartList[7]\n          ),\n          createSeries('Temperature', 2, data.temperature, themeChartList[12]),\n        ],\n      };\n\n      // providing echarts is in this case optional\n      registerTheme(echarts);\n\n      var myChart = initChart(themeSwitcher.getCurrentTheme(), options);\n\n      themeSwitcher.themeChanged.on((theme) => {\n        myChart.dispose();\n        myChart = initChart(theme, options);\n      });\n\n      window.onresize = function () {\n        myChart.resize();\n      };\n    <\/script>\n\n    <script type=\"module\" src=\"./init.js\"><\/script>\n  </body>\n</html>\n"})})}function U(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(W,{...e})}):W(e)}function _(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function V(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(_,{...e})}):_(e)}function B(e){return(0,s.jsx)(a.A,{name:"echarts-line-multiple-y-axis",source:{react:{"echarts-line-multiple-y-axis.tsx":b,"echarts-line-multiple-y-axis.scoped.css":E},angular:{"echarts-line-multiple-y-axis.ts":M,"echarts-line-multiple-y-axis.html":N,"echarts-line-multiple-y-axis.css":F},vue:{"echarts-line-multiple-y-axis.vue":I,"echarts-line-multiple-y-axis.css":J},html:{"echarts-line-multiple-y-axis.html":U,"echarts-line-multiple-y-axis.css":V}},files:{react:{"echarts-line-multiple-y-axis.tsx":"react/echarts-line-multiple-y-axis.tsx","echarts-line-multiple-y-axis.scoped.css":"react/echarts-line-multiple-y-axis.scoped.css"},angular:{"echarts-line-multiple-y-axis.ts":"angular/echarts-line-multiple-y-axis.ts","echarts-line-multiple-y-axis.html":"angular/echarts-line-multiple-y-axis.html","echarts-line-multiple-y-axis.css":"angular/echarts-line-multiple-y-axis.css"},vue:{"echarts-line-multiple-y-axis.vue":"vue/echarts-line-multiple-y-axis.vue","echarts-line-multiple-y-axis.css":"vue/echarts-line-multiple-y-axis.css"},html:{"echarts-line-multiple-y-axis.html":"html/echarts-line-multiple-y-axis.html","echarts-line-multiple-y-axis.css":"html/echarts-line-multiple-y-axis.css"}},height:e.height,onlyFramework:e.onlyFramework})}function G(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(B,{...e})}):B(e)}function X(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import './echarts-line-advanced.scoped.css';\n\nimport { useEffect, useState } from 'react';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\nexport default function EchartsLineAdvanced() {\n  registerTheme(echarts);\n\n  const [theme, setTheme] = useState(themeSwitcher.getCurrentTheme());\n\n  useEffect(() => {\n    themeSwitcher.themeChanged.on((theme: string) => {\n      setTheme(theme);\n    });\n  }, []);\n\n  const dates = Array.from({ length: 2025 - 2013 }, (_, i) =>\n    (2013 + i).toString()\n  );\n\n  const stockData = [\n    77.67, 82.81, 84.09, 91.75, 118.15, 107.48, 99.36, 93.07, 137.18, 104.38,\n    156.48, 168.52,\n  ];\n\n  const options: EChartsOption = {\n    tooltip: { trigger: 'axis' },\n    xAxis: { type: 'category', data: dates },\n    yAxis: {\n      type: 'value',\n      splitLine: { lineStyle: { type: 'dashed' } },\n    },\n    series: [\n      {\n        type: 'line',\n        data: stockData,\n        smooth: true,\n        lineStyle: { width: 4, shadowBlur: 10 },\n        areaStyle: {\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n            {\n              offset: 0,\n              color: getComputedCSSProperty('color-primary'),\n            },\n            { offset: 1, color: 'transparent' },\n          ]),\n        },\n        markPoint: {\n          data: [\n            { type: 'max', name: 'Max', symbol: 'circle', symbolSize: 60 },\n            { type: 'min', name: 'Min', symbol: 'circle', symbolSize: 60 },\n          ],\n          label: {\n            fontWeight: 'bold',\n            color: getComputedCSSProperty('color-inv-contrast-text'),\n          },\n        },\n        markLine: {\n          data: [{ type: 'average', name: 'Avg' }],\n          lineStyle: { type: 'dashed' },\n        },\n      },\n    ],\n  };\n\n  return (\n    <ReactEcharts\n      style={{ height: '40rem' }}\n      option={options}\n      theme={theme}\n      className=\"echarts\"\n    />\n  );\n}\n"})})}function $(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(X,{...e})}):X(e)}function q(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function H(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(q,{...e})}):q(e)}function K(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Component, OnInit } from '@angular/core';\nimport { registerTheme, getComputedCSSProperty } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './echarts-line-advanced.html',\n  styleUrls: ['./echarts-line-advanced.css'],\n})\nexport default class EchartsLineAdvanced implements OnInit {\n  theme = themeSwitcher.getCurrentTheme();\n\n  dates = Array.from({ length: 2025 - 2013 }, (_, i) => (2013 + i).toString());\n\n  stockData = [\n    77.67, 82.81, 84.09, 91.75, 118.15, 107.48, 99.36, 93.07, 137.18, 104.38,\n    156.48, 168.52,\n  ];\n\n  options: EChartsOption = {\n    tooltip: { trigger: 'axis' },\n    xAxis: { type: 'category', data: this.dates },\n    yAxis: {\n      type: 'value',\n      splitLine: { lineStyle: { type: 'dashed' } },\n    },\n    series: [\n      {\n        type: 'line',\n        data: this.stockData,\n        smooth: true,\n        lineStyle: { width: 4, shadowBlur: 10 },\n        areaStyle: {\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n            {\n              offset: 0,\n              color: getComputedCSSProperty('color-primary'),\n            },\n            { offset: 1, color: 'transparent' },\n          ]),\n        },\n        markPoint: {\n          data: [\n            { type: 'max', name: 'Max', symbol: 'circle', symbolSize: 60 },\n            { type: 'min', name: 'Min', symbol: 'circle', symbolSize: 60 },\n          ],\n          label: {\n            fontWeight: 'bold',\n            color: getComputedCSSProperty('color-inv-contrast-text'),\n          },\n        },\n        markLine: {\n          data: [{ type: 'average', name: 'Avg' }],\n          lineStyle: { type: 'dashed' },\n        },\n      },\n    ],\n  };\n\n  ngOnInit() {\n    registerTheme(echarts);\n\n    themeSwitcher.themeChanged.on((theme: string) => {\n      this.theme = theme;\n    });\n  }\n}\n"})})}function Q(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(K,{...e})}):K(e)}function Z(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div\n  echarts\n  [options]="options"\n  [theme]="theme"\n  class="echarts"\n></div>\n'})})}function ee(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(Z,{...e})}):Z(e)}function ne(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function te(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(ne,{...e})}):ne(e)}function re(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport VueECharts from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport * as charts from 'echarts/charts';\nimport * as components from 'echarts/components';\nimport * as renderer from 'echarts/renderers';\nimport { EChartsOption } from 'echarts';\n\necharts.use([\n  components.TooltipComponent,\n  components.LegendComponent,\n  components.GridComponent,\n  components.MarkLineComponent,\n  components.MarkPointComponent,\n  charts.LineChart,\n  renderer.CanvasRenderer,\n]);\n\nregisterTheme(echarts);\n\nconst theme = ref(themeSwitcher.getCurrentTheme());\n\nthemeSwitcher.themeChanged.on((newTheme: string) => {\n  theme.value = newTheme;\n});\n\nconst dates = Array.from({ length: 2025 - 2013 }, (_, i) =>\n  (2013 + i).toString()\n);\n\nconst stockData = [\n  77.67, 82.81, 84.09, 91.75, 118.15, 107.48, 99.36, 93.07, 137.18, 104.38,\n  156.48, 168.52,\n];\n\nconst options: EChartsOption = {\n  tooltip: { trigger: 'axis' },\n  xAxis: { type: 'category', data: dates },\n  yAxis: {\n    type: 'value',\n    splitLine: { lineStyle: { type: 'dashed' } },\n  },\n  series: [\n    {\n      type: 'line',\n      data: stockData,\n      smooth: true,\n      lineStyle: { width: 4, shadowBlur: 10 },\n      areaStyle: {\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: getComputedCSSProperty('color-primary'),\n          },\n          { offset: 1, color: 'transparent' },\n        ]),\n      },\n      markPoint: {\n        data: [\n          { type: 'max', name: 'Max', symbol: 'circle', symbolSize: 60 },\n          { type: 'min', name: 'Min', symbol: 'circle', symbolSize: 60 },\n        ],\n        label: {\n          fontWeight: 'bold',\n          color: getComputedCSSProperty('color-inv-contrast-text'),\n        },\n      },\n      markLine: {\n        data: [{ type: 'average', name: 'Avg' }],\n        lineStyle: { type: 'dashed' },\n      },\n    },\n  ],\n} as EChartsOption;\n<\/script>\n\n<style scoped src=\"./echarts-line-advanced.css\"></style>\n\n<template>\n  <VueECharts :theme=\"theme\" :option=\"options\" autoresize></VueECharts>\n</template>\n"})})}function se(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(re,{...e})}):re(e)}function ie(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function ae(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(ie,{...e})}):ie(e)}function oe(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ECharts line advanced example</title>\n    <link rel=\"stylesheet\" href=\"./echarts-line-advanced.css\" />\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"><\/script>\n    \n  </head>\n  <body class=\"theme-classic-dark\">\n    <div id=\"main\" class=\"echarts\"></div>\n\n    <script type=\"module\">\n      import {\n        registerTheme,\n        getComputedCSSProperty,\n      } from '@siemens/ix-echarts';\n      import { themeSwitcher } from '@siemens/ix';\n\n      function initChart(theme, options) {\n        var myChart = echarts.init(document.querySelector('#main'), theme);\n        myChart.setOption(options);\n\n        return myChart;\n      }\n\n      const dates = Array.from({ length: 2025 - 2013 }, (_, i) =>\n        (2013 + i).toString()\n      );\n\n      const stockData = [\n        77.67, 82.81, 84.09, 91.75, 118.15, 107.48, 99.36, 93.07, 137.18,\n        104.38, 156.48, 168.52,\n      ];\n\n      const options = {\n        tooltip: { trigger: 'axis' },\n        xAxis: { type: 'category', data: dates },\n        yAxis: {\n          type: 'value',\n          splitLine: { lineStyle: { type: 'dashed' } },\n        },\n        series: [\n          {\n            type: 'line',\n            data: stockData,\n            smooth: true,\n            lineStyle: { width: 4, shadowBlur: 10 },\n            areaStyle: {\n              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                {\n                  offset: 0,\n                  color: getComputedCSSProperty('color-primary'),\n                },\n                { offset: 1, color: 'transparent' },\n              ]),\n            },\n            markPoint: {\n              data: [\n                { type: 'max', name: 'Max', symbol: 'circle', symbolSize: 60 },\n                { type: 'min', name: 'Min', symbol: 'circle', symbolSize: 60 },\n              ],\n              label: {\n                fontWeight: 'bold',\n                color: getComputedCSSProperty('color-inv-contrast-text'),\n              },\n            },\n            markLine: {\n              data: [{ type: 'average', name: 'Avg' }],\n              lineStyle: { type: 'dashed' },\n            },\n          },\n        ],\n      };\n\n      // providing echarts is in this case optional\n      registerTheme(echarts);\n\n      var myChart = initChart(themeSwitcher.getCurrentTheme(), options);\n\n      themeSwitcher.themeChanged.on((theme) => {\n        myChart.dispose();\n        myChart = initChart(theme, options);\n      });\n\n      window.onresize = function () {\n        myChart.resize();\n      };\n    <\/script>\n\n    <script type=\"module\" src=\"./init.js\"><\/script>\n  </body>\n</html>\n"})})}function ce(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(oe,{...e})}):oe(e)}function he(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function le(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(he,{...e})}):he(e)}function me(e){return(0,s.jsx)(a.A,{name:"echarts-line-advanced",source:{react:{"echarts-line-advanced.tsx":$,"echarts-line-advanced.scoped.css":H},angular:{"echarts-line-advanced.ts":Q,"echarts-line-advanced.html":ee,"echarts-line-advanced.css":te},vue:{"echarts-line-advanced.vue":se,"echarts-line-advanced.css":ae},html:{"echarts-line-advanced.html":ce,"echarts-line-advanced.css":le}},files:{react:{"echarts-line-advanced.tsx":"react/echarts-line-advanced.tsx","echarts-line-advanced.scoped.css":"react/echarts-line-advanced.scoped.css"},angular:{"echarts-line-advanced.ts":"angular/echarts-line-advanced.ts","echarts-line-advanced.html":"angular/echarts-line-advanced.html","echarts-line-advanced.css":"angular/echarts-line-advanced.css"},vue:{"echarts-line-advanced.vue":"vue/echarts-line-advanced.vue","echarts-line-advanced.css":"vue/echarts-line-advanced.css"},html:{"echarts-line-advanced.html":"html/echarts-line-advanced.html","echarts-line-advanced.css":"html/echarts-line-advanced.css"}},height:e.height,onlyFramework:e.onlyFramework})}function pe(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(me,{...e})}):me(e)}const de={},ue=void 0,xe={},ge=[{value:"Development",id:"development",level:2},{value:"Basic",id:"basic",level:3},{value:"Multi-y-axis line charts",id:"multi-y-axis-line-charts",level:3},{value:"Advanced line charts",id:"advanced-line-charts",level:3},{value:"Dos and Don&#39;ts",id:"dos-and-donts",level:3}];function ye(e){const n={h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,s.jsx)(n.h3,{id:"basic",children:"Basic"}),"\n",(0,s.jsx)(n.p,{children:"Basic line charts use a series of data points connected by straight lines to show changes in values, making it easy to identify patterns, trends and fluctuations. Line charts are particularly effective for displaying continuous data, such as stock prices, temperature changes or sales figures. Their simplicity and clarity make them a popular choice for dashboards, where understanding data trends is essential."}),"\n",(0,s.jsx)(L,{height:"40rem"}),"\n",(0,s.jsx)(n.h3,{id:"multi-y-axis-line-charts",children:"Multi-y-axis line charts"}),"\n",(0,s.jsx)(n.p,{children:"Multi-y-axis line charts are used to compare multiple data series that have different scales or units of measurement. By using multiple y-axes, you can display data with different ranges on the same chart, making it easier to compare trends and relationships between variables. Multi-y-axis line charts are particularly useful when visualizing data with distinct patterns or trends."}),"\n",(0,s.jsx)(G,{height:"40rem"}),"\n",(0,s.jsx)(n.h3,{id:"advanced-line-charts",children:"Advanced line charts"}),"\n",(0,s.jsx)(n.p,{children:"Advanced line charts are an enhanced version of basic line charts, designed to provide deeper insights and a more detailed analysis of data trends. These charts often incorporate features such as multiple data series, interactive elements, and additional annotations to highlight key points or events. Advanced line charts can also include trend lines, moving averages and other statistical tools to help identify patterns and correlations."}),"\n",(0,s.jsx)(pe,{height:"40rem"}),"\n",(0,s.jsx)(n.h3,{id:"dos-and-donts",children:"Dos and Don'ts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Do start the Y-axis at zero and label axes clearly"}),"\n",(0,s.jsx)(n.li,{children:"Do use contrasting colors for multiple lines to better distinguish different data series"}),"\n",(0,s.jsx)(n.li,{children:"Do use consistent intervals on axes"}),"\n",(0,s.jsx)(n.li,{children:"Do highlight important data points"}),"\n",(0,s.jsx)(n.li,{children:"Do use visual cues to show gaps in data"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t overcrowd the chart with colors"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t clutter the chart with too many lines, we recommend no more than 7 lines"}),"\n"]})]})}function fe(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(ye,{...e})}):ye(e)}}}]);