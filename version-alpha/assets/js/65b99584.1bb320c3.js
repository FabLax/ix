"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6849],{23239:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>T,contentTitle:()=>R,default:()=>L,frontMatter:()=>P,metadata:()=>s,toc:()=>E});const s=JSON.parse('{"id":"components/3d/code","title":"code","description":"Development","source":"@site/docs/components/3d/code.mdx","sourceDirName":"components/3d","slug":"/components/3d/code","permalink":"/version-alpha/docs/components/3d/code","draft":false,"unlisted":false,"editUrl":"https://github.com/siemens/ix/tree/main/packages/documentation/docs/components/3d/code.mdx","tags":[],"version":"current","frontMatter":{}}');var r=t(65723),i=t(65598),o=t(89403);function c(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import './echarts-special-3d.scoped.css';\n\nimport { useEffect, useState } from 'react';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\n\nexport default function EchartsSpecial3d() {\n  registerTheme(echarts);\n\n  const [theme, setTheme] = useState(themeSwitcher.getCurrentTheme());\n\n  useEffect(() => {\n    themeSwitcher.themeChanged.on((theme: string) => {\n      setTheme(theme);\n    });\n  }, []);\n\n  function gridConfig() {\n    return {\n      type: 'value',\n      axisLine: {\n        lineStyle: {\n          color: getComputedCSSProperty('chart-axes'),\n        },\n      },\n      splitLine: {\n        lineStyle: {\n          color: getComputedCSSProperty('chart-grid-lines'),\n        },\n      },\n      axisLabel: {\n        color: getComputedCSSProperty('color-std-text'),\n      },\n    };\n  }\n\n  const options: EChartsOption = {\n    tooltip: {},\n    visualMap: {\n      show: false,\n      dimension: 2,\n      min: -1,\n      max: 1,\n    },\n    xAxis3D: gridConfig(),\n    yAxis3D: gridConfig(),\n    zAxis3D: gridConfig(),\n    grid3D: {\n      viewControl: {\n        projection: 'orthographic',\n      },\n    },\n    series: [\n      {\n        type: 'surface',\n        equation: {\n          x: {\n            step: 0.05,\n          },\n          y: {\n            step: 0.05,\n          },\n          z: (x: number, y: number): string | number => {\n            if (Math.abs(x) < 0.1 && Math.abs(y) < 0.1) {\n              return '-';\n            }\n            return Math.sin(x * Math.PI) * Math.sin(y * Math.PI);\n          },\n        },\n      } as any,\n    ],\n  };\n\n  return (\n    <ReactEcharts\n      style={{ height: '40rem' }}\n      option={options}\n      theme={theme}\n      className=\"echarts\"\n    />\n  );\n}\n"})})}function a(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}function h(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}function l(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { Component, OnInit } from '@angular/core';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport { EChartsOption } from 'echarts';\nimport * as echarts from 'echarts';\n\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './echarts-special-3d.html',\n  styleUrls: ['./echarts-special-3d.css'],\n})\nexport default class EchartsSpecial3d implements OnInit {\n  theme = themeSwitcher.getCurrentTheme();\n\n  gridConfig() {\n    return {\n      type: 'value',\n      axisLine: {\n        lineStyle: {\n          color: getComputedCSSProperty('chart-axes'),\n        },\n      },\n      splitLine: {\n        lineStyle: {\n          color: getComputedCSSProperty('chart-grid-lines'),\n        },\n      },\n      axisLabel: {\n        color: getComputedCSSProperty('color-std-text'),\n      },\n    };\n  }\n\n  options: EChartsOption = {\n    tooltip: {},\n    visualMap: {\n      show: false,\n      dimension: 2,\n      min: -1,\n      max: 1,\n    },\n    xAxis3D: this.gridConfig(),\n    yAxis3D: this.gridConfig(),\n    zAxis3D: this.gridConfig(),\n    grid3D: {\n      viewControl: {\n        projection: 'orthographic',\n      },\n    },\n    series: [\n      {\n        type: 'surface',\n        equation: {\n          x: {\n            step: 0.05,\n          },\n          y: {\n            step: 0.05,\n          },\n          z: (x: number, y: number): string | number => {\n            if (Math.abs(x) < 0.1 && Math.abs(y) < 0.1) {\n              return '-';\n            }\n            return Math.sin(x * Math.PI) * Math.sin(y * Math.PI);\n          },\n        },\n      } as any,\n    ],\n  };\n\n  ngOnInit() {\n    registerTheme(echarts);\n\n    themeSwitcher.themeChanged.on((theme: string) => {\n      this.theme = theme;\n    });\n  }\n}\n"})})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}function m(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<div\n  echarts\n  [options]="options"\n  [theme]="theme"\n  class="echarts"\n></div>\n'})})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}function g(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function x(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(g,{...n})}):g(n)}function f(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-vue",children:"<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport VueECharts from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport * as charts from 'echarts/charts';\nimport * as components from 'echarts/components';\nimport * as renderer from 'echarts/renderers';\nimport { EChartsOption } from 'echarts';\n\n\necharts.use([\n  components.TooltipComponent,\n  components.LegendComponent,\n  components.GridComponent,\n  components.MarkLineComponent,\n  charts.BarChart,\n  renderer.CanvasRenderer,\n]);\n\nregisterTheme(echarts);\n\nconst theme = ref(themeSwitcher.getCurrentTheme());\n\nthemeSwitcher.themeChanged.on((newTheme: string) => {\n  theme.value = newTheme;\n});\n\nfunction gridConfig() {\n  return {\n    type: 'value',\n    axisLine: {\n      lineStyle: {\n        color: getComputedCSSProperty('chart-axes'),\n      },\n    },\n    splitLine: {\n      lineStyle: {\n        color: getComputedCSSProperty('chart-grid-lines'),\n      },\n    },\n    axisLabel: {\n      color: getComputedCSSProperty('color-std-text'),\n    },\n  };\n}\n\nconst options = {\n  tooltip: {},\n  visualMap: {\n    show: false,\n    dimension: 2,\n    min: -1,\n    max: 1,\n  },\n  xAxis3D: gridConfig(),\n  yAxis3D: gridConfig(),\n  zAxis3D: gridConfig(),\n  grid3D: {\n    viewControl: {\n      projection: 'orthographic',\n    },\n  },\n  series: [\n    {\n      type: 'surface',\n      equation: {\n        x: {\n          step: 0.05,\n        },\n        y: {\n          step: 0.05,\n        },\n        z: (x: number, y: number): string | number => {\n          if (Math.abs(x) < 0.1 && Math.abs(y) < 0.1) {\n            return '-';\n          }\n          return Math.sin(x * Math.PI) * Math.sin(y * Math.PI);\n        },\n      },\n    } as any,\n  ],\n} as EChartsOption;\n<\/script>\n\n<style scoped src=\"./echarts-special-3d.css\"></style>\n\n<template>\n  <VueECharts :theme=\"theme\" :option=\"options\" autoresize></VueECharts>\n</template>\n"})})}function C(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(f,{...n})}):f(n)}function y(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function j(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(y,{...n})}):y(n)}function v(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>ECharts special 3d example</title>\n    <link rel="stylesheet" href="./echarts-special-3d.css" />\n    \n    <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js"><\/script>\n    <script src="https://fastly.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js"><\/script>\n    \n  </head>\n  <body class="theme-classic-dark">\n    <div id="main" class="echarts"></div>\n\n    <script type="module">\n      import {\n        getComputedCSSProperty,\n        registerTheme,\n      } from \'@siemens/ix-echarts\';\n      import { themeSwitcher } from \'@siemens/ix\';\n\n      function initChart(theme, options) {\n        var myChart = echarts.init(document.querySelector(\'#main\'), theme);\n        myChart.setOption(options);\n\n        return myChart;\n      }\n\n      function gridConfig() {\n        return {\n          type: \'value\',\n          axisLine: {\n            lineStyle: {\n              color: getComputedCSSProperty(\'chart-axes\'),\n            },\n          },\n          splitLine: {\n            lineStyle: {\n              color: getComputedCSSProperty(\'chart-grid-lines\'),\n            },\n          },\n          axisLabel: {\n            color: getComputedCSSProperty(\'color-std-text\'),\n          },\n        };\n      }\n\n      const options = {\n        tooltip: {},\n        visualMap: {\n          show: false,\n          dimension: 2,\n          min: -1,\n          max: 1,\n        },\n        xAxis3D: gridConfig(),\n        yAxis3D: gridConfig(),\n        zAxis3D: gridConfig(),\n        grid3D: {\n          viewControl: {\n            projection: \'orthographic\',\n          },\n        },\n        series: [\n          {\n            type: \'surface\',\n            equation: {\n              x: {\n                step: 0.05,\n              },\n              y: {\n                step: 0.05,\n              },\n              z: function (x, y) {\n                if (Math.abs(x) < 0.1 && Math.abs(y) < 0.1) {\n                  return \'-\';\n                }\n                return Math.sin(x * Math.PI) * Math.sin(y * Math.PI);\n              },\n            },\n          },\n        ],\n      };\n\n      // providing echarts is in this case optional\n      registerTheme(echarts);\n\n      var myChart = initChart(themeSwitcher.getCurrentTheme(), options);\n\n      themeSwitcher.themeChanged.on((theme) => {\n        myChart.dispose();\n        myChart = initChart(theme, options);\n      });\n\n      window.onresize = function () {\n        myChart.resize();\n      };\n    <\/script>\n\n    <script type="module" src="./init.js"><\/script>\n  </body>\n</html>\n'})})}function S(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(v,{...n})}):v(n)}function w(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function D(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(w,{...n})}):w(n)}function b(n){return(0,r.jsx)(o.A,{name:"echarts-special-3d",source:{react:{"echarts-special-3d.tsx":a,"echarts-special-3d.scoped.css":p},angular:{"echarts-special-3d.ts":d,"echarts-special-3d.html":u,"echarts-special-3d.css":x},vue:{"echarts-special-3d.vue":C,"echarts-special-3d.css":j},html:{"echarts-special-3d.html":S,"echarts-special-3d.css":D}},files:{react:{"echarts-special-3d.tsx":"react/echarts-special-3d.tsx","echarts-special-3d.scoped.css":"react/echarts-special-3d.scoped.css"},angular:{"echarts-special-3d.ts":"angular/echarts-special-3d.ts","echarts-special-3d.html":"angular/echarts-special-3d.html","echarts-special-3d.css":"angular/echarts-special-3d.css"},vue:{"echarts-special-3d.vue":"vue/echarts-special-3d.vue","echarts-special-3d.css":"vue/echarts-special-3d.css"},html:{"echarts-special-3d.html":"html/echarts-special-3d.html","echarts-special-3d.css":"html/echarts-special-3d.css"}},height:n.height,onlyFramework:n.onlyFramework})}function M(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(b,{...n})}):b(n)}const P={},R=void 0,T={},E=[{value:"Development",id:"development",level:2},{value:"Basic",id:"basic",level:3},{value:"Installation",id:"installation",level:3},{value:"3D-Charting",id:"3d-charting",level:3},{value:"Dos and Don&#39;ts",id:"dos-and-donts",level:3}];function k(n){const e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"development",children:"Development"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"echarts-gl"})," package extends ECharts to support 3D visualizations. With this package, you can design a variety of 3D charts, including:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"3D scatter plots"}),"\n",(0,r.jsx)(e.li,{children:"3D bar charts"}),"\n",(0,r.jsx)(e.li,{children:"3D surface plots"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"basic",children:"Basic"}),"\n",(0,r.jsx)(M,{height:"40rem"}),"\n",(0,r.jsx)(e.h3,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(e.p,{children:["To install the ",(0,r.jsx)(e.code,{children:"echarts-gl"})," package, run the following command:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:"npm install --save @siemens/ix-echarts\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3d-charting",children:"3D-Charting"}),"\n",(0,r.jsxs)(e.p,{children:["To use 3D charts, import the ",(0,r.jsx)(e.code,{children:"echarts-gl"})," package into your project:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"import 'echarts-gl';\n"})}),"\n",(0,r.jsx)(e.h3,{id:"dos-and-donts",children:"Dos and Don'ts"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Do use with data that's best seen and interpreted in  multiple dimensions"}),"\n",(0,r.jsx)(e.li,{children:"Don\u2019t use 3D charts for simple data that can be effectively represented with 2D charts"}),"\n",(0,r.jsx)(e.li,{children:"Don\u2019t overuse 3D charts as they can make the data harder to interpret"}),"\n"]})]})}function L(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(k,{...n})}):k(n)}}}]);