"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2773,8539],{16619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>ge,contentTitle:()=>de,default:()=>we,frontMatter:()=>ue,metadata:()=>r,toc:()=>fe});const r=JSON.parse('{"id":"components/gauge-chart/code","title":"code","description":"Development","source":"@site/docs/components/gauge-chart/code.mdx","sourceDirName":"components/gauge-chart","slug":"/components/gauge-chart/code","permalink":"/version-alpha/docs/components/gauge-chart/code","draft":false,"unlisted":false,"editUrl":"https://github.com/siemens/ix/tree/main/packages/documentation/docs/components/gauge-chart/code.mdx","tags":[],"version":"current","frontMatter":{}}');var s=t(65723),o=t(65598),a=t(89403);function c(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import './echarts-gauge.scoped.css';\n\nimport { useEffect, useState } from 'react';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\nexport default function EchartsGauge() {\n  registerTheme(echarts);\n\n  const [theme, setTheme] = useState(themeSwitcher.getCurrentTheme());\n\n  useEffect(() => {\n    themeSwitcher.themeChanged.on((theme: string) => {\n      setTheme(theme);\n    });\n  }, []);\n\n  const value = 45.3;\n\n  function getGaugeColor(value: number) {\n    if (value > 60) return getComputedCSSProperty('color-success');\n    else if (value > 25) return getComputedCSSProperty('color-warning');\n    else {\n      return getComputedCSSProperty('color-alarm');\n    }\n  }\n\n  const options: EChartsOption = {\n    series: [\n      {\n        id: '1',\n        type: 'gauge',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            width: 18,\n            color: [[1, getComputedCSSProperty('color-neutral-40')]],\n          },\n        },\n        axisTick: {\n          show: false,\n        },\n        radius: '75%',\n        center: ['50%', '60%'],\n        startAngle: 180,\n        endAngle: 0,\n        splitNumber: 1,\n        splitLine: {\n          show: true,\n        },\n        axisLabel: {\n          show: true,\n          distance: 30,\n          fontSize: 16,\n        },\n        progress: {\n          show: true,\n          overlap: false,\n          width: 35,\n          itemStyle: {\n            borderMiterLimit: 16,\n            color: getGaugeColor(value),\n          },\n        },\n        pointer: {\n          show: false,\n        },\n        data: [\n          {\n            value: value,\n            title: {\n              show: false,\n            },\n            detail: {\n              show: true,\n              offsetCenter: [0, -70],\n              overflow: 'break',\n              fontSize: '1.5rem',\n              width: 250,\n              lineHeight: 35,\n              color: getComputedCSSProperty('color-soft-text'),\n              formatter: '{value}Mbps \\nNetwork Speed',\n            },\n            pointer: {\n              show: false,\n            },\n          },\n        ],\n      },\n      {\n        id: '2',\n        type: 'gauge',\n        splitLine: {\n          show: false,\n        },\n        axisTick: {\n          show: false,\n        },\n        axisLabel: {\n          show: false,\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            width: 5,\n            color: [\n              [0.25, getComputedCSSProperty('color-alarm')],\n              [0.6, getComputedCSSProperty('color-warning')],\n              [1, getComputedCSSProperty('color-success')],\n            ],\n          },\n        },\n        radius: '80%',\n        center: ['50%', '60%'],\n        startAngle: 180,\n        endAngle: 0,\n      },\n    ],\n  };\n\n  return (\n    <ReactEcharts\n      style={{ height: '40rem' }}\n      option={options}\n      theme={theme}\n      className=\"echarts\"\n    />\n  );\n}\n"})})}function i(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}function p(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Component, OnInit } from '@angular/core';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './echarts-gauge.html',\n  styleUrls: ['./echarts-gauge.css'],\n})\nexport default class EchartsGauge implements OnInit {\n  theme = themeSwitcher.getCurrentTheme();\n\n  value = 45.3;\n\n  private getGaugeColor(value: number) {\n    if (value > 60) return getComputedCSSProperty('color-success');\n    else if (value > 25) return getComputedCSSProperty('color-warning');\n    else {\n      return getComputedCSSProperty('color-alarm');\n    }\n  }\n\n  options: EChartsOption = {\n    series: [\n      {\n        id: '1',\n        type: 'gauge',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            width: 18,\n            color: [[1, getComputedCSSProperty('color-neutral-40')]],\n          },\n        },\n        axisTick: {\n          show: false,\n        },\n        radius: '75%',\n        center: ['50%', '60%'],\n        startAngle: 180,\n        endAngle: 0,\n        splitNumber: 1,\n        splitLine: {\n          show: true,\n        },\n        axisLabel: {\n          show: true,\n          distance: 30,\n          fontSize: 16,\n        },\n        progress: {\n          show: true,\n          overlap: false,\n          width: 35,\n          itemStyle: {\n            borderMiterLimit: 16,\n            color: this.getGaugeColor(this.value),\n          },\n        },\n        pointer: {\n          show: false,\n        },\n        data: [\n          {\n            value: this.value,\n            title: {\n              show: false,\n            },\n            detail: {\n              show: true,\n              offsetCenter: [0, -70],\n              overflow: 'break',\n              fontSize: '1.5rem',\n              width: 250,\n              lineHeight: 35,\n              color: getComputedCSSProperty('color-soft-text'),\n              formatter: '{value}Mbps \\nNetwork Speed',\n            },\n            pointer: {\n              show: false,\n            },\n          },\n        ],\n      },\n      {\n        id: '2',\n        type: 'gauge',\n        splitLine: {\n          show: false,\n        },\n        axisTick: {\n          show: false,\n        },\n        axisLabel: {\n          show: false,\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            width: 5,\n            color: [\n              [0.25, getComputedCSSProperty('color-alarm')],\n              [0.6, getComputedCSSProperty('color-warning')],\n              [1, getComputedCSSProperty('color-success')],\n            ],\n          },\n        },\n        radius: '80%',\n        center: ['50%', '60%'],\n        startAngle: 180,\n        endAngle: 0,\n      },\n    ],\n  };\n\n  ngOnInit() {\n    registerTheme(echarts);\n\n    themeSwitcher.themeChanged.on((theme: string) => {\n      this.theme = theme;\n    });\n  }\n}\n"})})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}function u(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div\n  echarts\n  [options]="options"\n  [theme]="theme"\n  class="echarts"\n></div>\n'})})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}function g(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}function C(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport VueECharts from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport * as charts from 'echarts/charts';\nimport * as components from 'echarts/components';\nimport * as renderer from 'echarts/renderers';\nimport { EChartsOption } from 'echarts';\n\necharts.use([\n  components.TooltipComponent,\n  components.LegendComponent,\n  components.GridComponent,\n  components.MarkLineComponent,\n  charts.GaugeChart,\n  renderer.CanvasRenderer,\n]);\n\nregisterTheme(echarts);\n\nconst theme = ref(themeSwitcher.getCurrentTheme());\n\nthemeSwitcher.themeChanged.on((newTheme: string) => {\n  theme.value = newTheme;\n});\n\nconst value = 45.3;\n\nfunction getGaugeColor(value: number) {\n  if (value > 60) return getComputedCSSProperty('color-success');\n  else if (value > 25) return getComputedCSSProperty('color-warning');\n  else {\n    return getComputedCSSProperty('color-alarm');\n  }\n}\n\nconst options: EChartsOption = {\n  series: [\n    {\n      id: '1',\n      type: 'gauge',\n      axisLine: {\n        show: true,\n        lineStyle: {\n          width: 18,\n          color: [[1, getComputedCSSProperty('color-neutral-40')]],\n        },\n      },\n      axisTick: {\n        show: false,\n      },\n      radius: '75%',\n      center: ['50%', '60%'],\n      startAngle: 180,\n      endAngle: 0,\n      splitNumber: 1,\n      splitLine: {\n        show: true,\n      },\n      axisLabel: {\n        show: true,\n        distance: 30,\n        fontSize: 16,\n      },\n      progress: {\n        show: true,\n        overlap: false,\n        width: 35,\n        itemStyle: {\n          borderMiterLimit: 16,\n          color: getGaugeColor(value),\n        },\n      },\n      pointer: {\n        show: false,\n      },\n      data: [\n        {\n          value: value,\n          title: {\n            show: false,\n          },\n          detail: {\n            show: true,\n            offsetCenter: [0, -70],\n            overflow: 'break',\n            fontSize: '1.5rem',\n            width: 250,\n            lineHeight: 35,\n            color: getComputedCSSProperty('color-soft-text'),\n            formatter: '{value}Mbps \\nNetwork Speed',\n          },\n          pointer: {\n            show: false,\n          },\n        },\n      ],\n    },\n    {\n      id: '2',\n      type: 'gauge',\n      splitLine: {\n        show: false,\n      },\n      axisTick: {\n        show: false,\n      },\n      axisLabel: {\n        show: false,\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          width: 5,\n          color: [\n            [0.25, getComputedCSSProperty('color-alarm')],\n            [0.6, getComputedCSSProperty('color-warning')],\n            [1, getComputedCSSProperty('color-success')],\n          ],\n        },\n      },\n      radius: '80%',\n      center: ['50%', '60%'],\n      startAngle: 180,\n      endAngle: 0,\n    },\n  ],\n} as EChartsOption;\n<\/script>\n\n<style scoped src=\"./echarts-gauge.css\"></style>\n\n<template>\n  <VueECharts :theme=\"theme\" :option=\"options\" autoresize></VueECharts>\n</template>\n"})})}function w(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(C,{...e})}):C(e)}function x(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function S(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}function y(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ECharts gauge example</title>\n    <link rel=\"stylesheet\" href=\"./echarts-gauge.css\" />\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"><\/script>\n    \n  </head>\n  <body class=\"theme-classic-dark\">\n    <div id=\"main\" class=\"echarts\"></div>\n\n    <script type=\"module\">\n      import {\n        registerTheme,\n        getComputedCSSProperty,\n      } from '@siemens/ix-echarts';\n      import { themeSwitcher } from '@siemens/ix';\n\n      function initChart(theme, options) {\n        var myChart = echarts.init(document.querySelector('#main'), theme, {\n          renderer: 'svg',\n        });\n        myChart.setOption(options);\n\n        return myChart;\n      }\n\n      let dates = [];\n      for (let year = 2013; year < 2025; year++) {\n        dates.push(year.toString());\n      }\n\n      let value = 45.3;\n\n      function getGaugeColor(value) {\n        if (value > 60) return getComputedCSSProperty('color-success');\n        else if (value > 25) return getComputedCSSProperty('color-warning');\n        else {\n          return getComputedCSSProperty('color-alarm');\n        }\n      }\n\n      const options = {\n        series: [\n          {\n            id: '1',\n            type: 'gauge',\n            axisLine: {\n              show: true,\n              lineStyle: {\n                width: 18,\n                color: [[1, getComputedCSSProperty('color-neutral-40')]],\n              },\n            },\n            axisTick: {\n              show: false,\n            },\n            radius: '75%',\n            center: ['50%', '60%'],\n            startAngle: 180,\n            endAngle: 0,\n            splitNumber: 1,\n            splitLine: {\n              show: true,\n            },\n            axisLabel: {\n              show: true,\n              distance: 30,\n              fontSize: 16,\n            },\n            progress: {\n              show: true,\n              overlap: false,\n              width: 35,\n              itemStyle: {\n                borderMiterLimit: 16,\n                color: getGaugeColor(value),\n              },\n            },\n            pointer: {\n              show: false,\n            },\n            data: [\n              {\n                value: value,\n                title: {\n                  show: false,\n                },\n                detail: {\n                  show: true,\n                  offsetCenter: [0, -70],\n                  overflow: 'break',\n                  fontSize: '1.5rem',\n                  width: 250,\n                  lineHeight: 35,\n                  color: getComputedCSSProperty('color-soft-text'),\n                  formatter: '{value}Mbps \\nNetwork Speed',\n                },\n                pointer: {\n                  show: false,\n                },\n              },\n            ],\n          },\n          {\n            id: '2',\n            type: 'gauge',\n            splitLine: {\n              show: false,\n            },\n            axisTick: {\n              show: false,\n            },\n            axisLabel: {\n              show: false,\n            },\n            axisLine: {\n              show: true,\n              lineStyle: {\n                width: 5,\n                color: [\n                  [0.25, getComputedCSSProperty('color-alarm')],\n                  [0.6, getComputedCSSProperty('color-warning')],\n                  [1, getComputedCSSProperty('color-success')],\n                ],\n              },\n            },\n            radius: '80%',\n            center: ['50%', '60%'],\n            startAngle: 180,\n            endAngle: 0,\n          },\n        ],\n      };\n\n      // providing echarts is in this case optional\n      registerTheme(echarts);\n\n      var myChart = initChart(themeSwitcher.getCurrentTheme(), options);\n\n      themeSwitcher.themeChanged.on((theme) => {\n        myChart.dispose();\n        myChart = initChart(theme, options);\n      });\n\n      window.onresize = function () {\n        myChart.resize();\n      };\n    <\/script>\n\n    <script type=\"module\" src=\"./init.js\"><\/script>\n  </body>\n</html>\n"})})}function v(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(y,{...e})}):y(e)}function j(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts {\n  position: relative;\n  width: 100%;\n  height: 40rem;\n  padding-top: 1rem;\n}\n"})})}function P(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}function T(e){return(0,s.jsx)(a.A,{name:"echarts-gauge",source:{react:{"echarts-gauge.tsx":i,"echarts-gauge.scoped.css":h},angular:{"echarts-gauge.ts":m,"echarts-gauge.html":d,"echarts-gauge.css":f},vue:{"echarts-gauge.vue":w,"echarts-gauge.css":S},html:{"echarts-gauge.html":v,"echarts-gauge.css":P}},files:{react:{"echarts-gauge.tsx":"react/echarts-gauge.tsx","echarts-gauge.scoped.css":"react/echarts-gauge.scoped.css"},angular:{"echarts-gauge.ts":"angular/echarts-gauge.ts","echarts-gauge.html":"angular/echarts-gauge.html","echarts-gauge.css":"angular/echarts-gauge.css"},vue:{"echarts-gauge.vue":"vue/echarts-gauge.vue","echarts-gauge.css":"vue/echarts-gauge.css"},html:{"echarts-gauge.html":"html/echarts-gauge.html","echarts-gauge.css":"html/echarts-gauge.css"}},height:e.height,onlyFramework:e.onlyFramework})}function b(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}function R(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import './echarts-progress-circle.scoped.css';\n\nimport { useEffect, useState } from 'react';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\nexport default function EchartsGauge() {\n  registerTheme(echarts);\n\n  const [theme, setTheme] = useState(themeSwitcher.getCurrentTheme());\n\n  useEffect(() => {\n    themeSwitcher.themeChanged.on((theme: string) => {\n      setTheme(theme);\n    });\n  }, []);\n\n  const value = 60;\n\n  const options: EChartsOption = {\n    series: [\n      {\n        id: '1',\n        type: 'gauge',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            width: 15,\n            color: [[1, getComputedCSSProperty('color-neutral-40')]],\n          },\n        },\n        axisTick: {\n          show: false,\n        },\n        radius: '100%',\n        startAngle: 90,\n        endAngle: -270,\n        splitLine: {\n          show: false,\n        },\n        axisLabel: {\n          show: false,\n        },\n        progress: {\n          show: true,\n          overlap: false,\n          width: 35,\n          itemStyle: {\n            borderMiterLimit: 16,\n            color: getComputedCSSProperty('color-success'),\n          },\n        },\n        pointer: {\n          show: false,\n        },\n        data: [\n          {\n            value: value,\n            detail: {\n              offsetCenter: [0, 0],\n              fontSize: '2rem',\n              fontWeight: 'normal',\n              color: getComputedCSSProperty('color-soft-text'),\n              rich: {\n                valueStyle: {\n                  fontSize: '2rem',\n                  color: getComputedCSSProperty('color-soft-text'),\n                  fontWeight: 'bold',\n                },\n                textStyle: {\n                  fontSize: '1.5rem',\n                  color: getComputedCSSProperty('color-soft-text'),\n                },\n              },\n              formatter: `{valueStyle|{value}}/100\\n{textStyle|completed}`,\n            },\n            pointer: {\n              show: false,\n            },\n          },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <ReactEcharts\n      style={{ height: '40rem' }}\n      option={options}\n      theme={theme}\n      className=\"echarts-gauge\"\n    />\n  );\n}\n"})})}function L(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(R,{...e})}):R(e)}function k(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts-gauge {\n  position: relative;\n  width: 100%;\n  height: 20rem;\n  padding-top: 3rem;\n}\n"})})}function E(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(k,{...e})}):k(e)}function A(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Component, OnInit } from '@angular/core';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './echarts-progress-circle.html',\n  styleUrls: ['./echarts-progress-circle.css'],\n})\nexport default class EchartsProgressCircle implements OnInit {\n  theme = themeSwitcher.getCurrentTheme();\n\n  value = 60;\n\n  options: EChartsOption = {\n    series: [\n      {\n        id: '1',\n        type: 'gauge',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            width: 15,\n            color: [[1, getComputedCSSProperty('color-neutral-40')]],\n          },\n        },\n        axisTick: {\n          show: false,\n        },\n        radius: '100%',\n        startAngle: 90,\n        endAngle: -270,\n        splitLine: {\n          show: false,\n        },\n        axisLabel: {\n          show: false,\n        },\n        progress: {\n          show: true,\n          overlap: false,\n          width: 35,\n          itemStyle: {\n            borderMiterLimit: 16,\n            color: getComputedCSSProperty('color-success'),\n          },\n        },\n        pointer: {\n          show: false,\n        },\n        data: [\n          {\n            value: this.value,\n            detail: {\n              offsetCenter: [0, 0],\n              fontSize: '2rem',\n              fontWeight: 'normal',\n              color: getComputedCSSProperty('color-soft-text'),\n              rich: {\n                valueStyle: {\n                  fontSize: '2rem',\n                  color: getComputedCSSProperty('color-soft-text'),\n                  fontWeight: 'bold',\n                },\n                textStyle: {\n                  fontSize: '1.5rem',\n                  color: getComputedCSSProperty('color-soft-text'),\n                },\n              },\n              formatter: `{valueStyle|{value}}/100\\n{textStyle|completed}`,\n            },\n            pointer: {\n              show: false,\n            },\n          },\n        ],\n      },\n    ],\n  };\n\n  ngOnInit() {\n    registerTheme(echarts);\n\n    themeSwitcher.themeChanged.on((theme: string) => {\n      this.theme = theme;\n    });\n  }\n}\n"})})}function N(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(A,{...e})}):A(e)}function z(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div\n  echarts\n  [options]="options"\n  [theme]="theme"\n  class="echarts-gauge"\n></div>\n'})})}function O(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(z,{...e})}):z(e)}function M(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts-gauge {\n  position: relative;\n  width: 100%;\n  height: 20rem;\n  padding-top: 3rem;\n}\n"})})}function G(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(M,{...e})}):M(e)}function D(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport VueECharts from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport * as charts from 'echarts/charts';\nimport * as components from 'echarts/components';\nimport * as renderer from 'echarts/renderers';\nimport { EChartsOption } from 'echarts';\n\necharts.use([\n  components.TooltipComponent,\n  components.LegendComponent,\n  components.GridComponent,\n  components.MarkLineComponent,\n  charts.GaugeChart,\n  renderer.CanvasRenderer,\n]);\n\nregisterTheme(echarts);\n\nconst theme = ref(themeSwitcher.getCurrentTheme());\n\nthemeSwitcher.themeChanged.on((newTheme: string) => {\n  theme.value = newTheme;\n});\n\nconst value = 60;\n\nconst options: EChartsOption = {\n  series: [\n    {\n      id: '1',\n      type: 'gauge',\n      axisLine: {\n        show: true,\n        lineStyle: {\n          width: 15,\n          color: [[1, getComputedCSSProperty('color-neutral-40')]],\n        },\n      },\n      axisTick: {\n        show: false,\n      },\n      radius: '100%',\n      startAngle: 90,\n      endAngle: -270,\n      splitLine: {\n        show: false,\n      },\n      axisLabel: {\n        show: false,\n      },\n      progress: {\n        show: true,\n        overlap: false,\n        width: 35,\n        itemStyle: {\n          borderMiterLimit: 16,\n          color: getComputedCSSProperty('color-success'),\n        },\n      },\n      pointer: {\n        show: false,\n      },\n      data: [\n        {\n          value: value,\n          detail: {\n            offsetCenter: [0, 0],\n            fontSize: '2rem',\n            fontWeight: 'normal',\n            color: getComputedCSSProperty('color-soft-text'),\n            rich: {\n              valueStyle: {\n                fontSize: '2rem',\n                color: getComputedCSSProperty('color-soft-text'),\n                fontWeight: 'bold',\n              },\n              textStyle: {\n                fontSize: '1.5rem',\n                color: getComputedCSSProperty('color-soft-text'),\n              },\n            },\n            formatter: `{valueStyle|{value}}/100\\n{textStyle|completed}`,\n          },\n          pointer: {\n            show: false,\n          },\n        },\n      ],\n    },\n  ],\n} as EChartsOption;\n<\/script>\n\n<style scoped src=\"./echarts-progress-circle.css\"></style>\n\n<template>\n  <VueECharts\n    :theme=\"theme\"\n    :option=\"options\"\n    autoresize\n    class=\"echarts-gauge\"\n  ></VueECharts>\n</template>\n"})})}function _(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(D,{...e})}):D(e)}function I(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts-gauge {\n  position: relative;\n  width: 100%;\n  height: 20rem;\n  padding-top: 3rem;\n}\n"})})}function U(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(I,{...e})}):I(e)}function W(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ECharts progress circle example</title>\n    <link rel=\"stylesheet\" href=\"./echarts-progress-circle.css\" />\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"><\/script>\n    \n  </head>\n  <body class=\"theme-classic-dark\">\n    <div id=\"main\" class=\"echarts-gauge\"></div>\n\n    <script type=\"module\">\n      import {\n        getComputedCSSProperty,\n        registerTheme,\n      } from '@siemens/ix-echarts';\n      import { themeSwitcher } from '@siemens/ix';\n\n      function initChart(theme, options) {\n        var myChart = echarts.init(document.querySelector('#main'), theme);\n        myChart.setOption(options);\n\n        return myChart;\n      }\n\n      const value = 68;\n\n      const options = {\n        series: [\n          {\n            id: '1',\n            type: 'gauge',\n            axisLine: {\n              show: true,\n              lineStyle: {\n                width: 15,\n                color: [[1, getComputedCSSProperty('color-neutral-40')]],\n              },\n            },\n            axisTick: {\n              show: false,\n            },\n            radius: '100%',\n            startAngle: 90,\n            endAngle: -270,\n            splitLine: {\n              show: false,\n            },\n            axisLabel: {\n              show: false,\n            },\n            progress: {\n              show: true,\n              overlap: false,\n              width: 35,\n              itemStyle: {\n                borderMiterLimit: 16,\n                color: getComputedCSSProperty('color-success'),\n              },\n            },\n            pointer: {\n              show: false,\n            },\n            data: [\n              {\n                value: value,\n                detail: {\n                  offsetCenter: [0, 0],\n                  fontSize: '2rem',\n                  fontWeight: 'normal',\n                  color: getComputedCSSProperty('color-soft-text'),\n                  rich: {\n                    valueStyle: {\n                      fontSize: '2rem',\n                      color: getComputedCSSProperty('color-soft-text'),\n                      fontWeight: 'bold',\n                    },\n                    textStyle: {\n                      fontSize: '1.5rem',\n                      color: getComputedCSSProperty('color-soft-text'),\n                    },\n                  },\n                  formatter: `{valueStyle|{value}}/100\\n{textStyle|completed}`,\n                },\n                pointer: {\n                  show: false,\n                },\n              },\n            ],\n          },\n        ],\n      };\n\n      // providing echarts is in this case optional\n      registerTheme(echarts);\n\n      var myChart = initChart(themeSwitcher.getCurrentTheme(), options);\n\n      themeSwitcher.themeChanged.on((theme) => {\n        myChart.dispose();\n        myChart = initChart(theme, options);\n      });\n\n      window.onresize = function () {\n        myChart.resize();\n      };\n    <\/script>\n\n    <script type=\"module\" src=\"./init.js\"><\/script>\n  </body>\n</html>\n"})})}function F(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(W,{...e})}):W(e)}function V(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts-gauge {\n  position: relative;\n  width: 100%;\n  height: 20rem;\n  padding-top: 3rem;\n}\n"})})}function H(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(V,{...e})}):V(e)}function q(e){return(0,s.jsx)(a.A,{name:"echarts-progress-circle",source:{react:{"echarts-progress-circle.tsx":L,"echarts-progress-circle.scoped.css":E},angular:{"echarts-progress-circle.ts":N,"echarts-progress-circle.html":O,"echarts-progress-circle.css":G},vue:{"echarts-progress-circle.vue":_,"echarts-progress-circle.css":U},html:{"echarts-progress-circle.html":F,"echarts-progress-circle.css":H}},files:{react:{"echarts-progress-circle.tsx":"react/echarts-progress-circle.tsx","echarts-progress-circle.scoped.css":"react/echarts-progress-circle.scoped.css"},angular:{"echarts-progress-circle.ts":"angular/echarts-progress-circle.ts","echarts-progress-circle.html":"angular/echarts-progress-circle.html","echarts-progress-circle.css":"angular/echarts-progress-circle.css"},vue:{"echarts-progress-circle.vue":"vue/echarts-progress-circle.vue","echarts-progress-circle.css":"vue/echarts-progress-circle.css"},html:{"echarts-progress-circle.html":"html/echarts-progress-circle.html","echarts-progress-circle.css":"html/echarts-progress-circle.css"}},height:e.height,onlyFramework:e.onlyFramework})}function Y(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(q,{...e})}):q(e)}function J(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import './echarts-progress-arc.scoped.css';\n\nimport { useEffect, useState } from 'react';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\nexport default function EchartsProgressArc() {\n  registerTheme(echarts);\n\n  const [theme, setTheme] = useState(themeSwitcher.getCurrentTheme());\n\n  useEffect(() => {\n    themeSwitcher.themeChanged.on((theme: string) => {\n      setTheme(theme);\n    });\n  }, []);\n\n  const value = 60;\n\n  const options: EChartsOption = {\n    series: [\n      {\n        id: '1',\n        type: 'gauge',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            width: 15,\n            color: [[1, getComputedCSSProperty('color-neutral-40')]],\n          },\n        },\n        axisTick: {\n          show: false,\n        },\n        radius: '100%',\n        startAngle: 200,\n        endAngle: -20,\n        splitLine: {\n          show: false,\n        },\n        axisLabel: {\n          show: false,\n        },\n        progress: {\n          show: true,\n          overlap: false,\n          width: 35,\n          itemStyle: {\n            borderMiterLimit: 16,\n            color: getComputedCSSProperty('color-success'),\n          },\n        },\n        pointer: {\n          show: false,\n        },\n        data: [\n          {\n            value: value,\n            detail: {\n              offsetCenter: [0, 0],\n              overflow: 'break',\n              fontSize: '2rem',\n              fontWeight: 'normal',\n              color: getComputedCSSProperty('color-soft-text'),\n              width: 250,\n              lineHeight: 35,\n              formatter: '{value} / 100 \\n completed',\n            },\n            pointer: {\n              show: false,\n            },\n          },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <ReactEcharts\n      style={{ height: '40rem' }}\n      option={options}\n      theme={theme}\n      className=\"echarts-gauge\"\n    />\n  );\n}\n"})})}function K(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(J,{...e})}):J(e)}function Q(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts-gauge {\n  position: relative;\n  width: 100%;\n  height: 20rem;\n  padding-top: 3rem;\n}\n"})})}function B(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(Q,{...e})}):Q(e)}function X(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Component, OnInit } from '@angular/core';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport * as echarts from 'echarts/core';\nimport { EChartsOption } from 'echarts';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './echarts-progress-arc.html',\n  styleUrls: ['./echarts-progress-arc.css'],\n})\nexport default class EchartsProgressArc implements OnInit {\n  theme = themeSwitcher.getCurrentTheme();\n\n  value = 60;\n\n  options: EChartsOption = {\n    series: [\n      {\n        id: '1',\n        type: 'gauge',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            width: 15,\n            color: [[1, getComputedCSSProperty('color-neutral-40')]],\n          },\n        },\n        axisTick: {\n          show: false,\n        },\n        radius: '100%',\n        startAngle: 200,\n        endAngle: -20,\n        splitLine: {\n          show: false,\n        },\n        axisLabel: {\n          show: false,\n        },\n        progress: {\n          show: true,\n          overlap: false,\n          width: 35,\n          itemStyle: {\n            borderMiterLimit: 16,\n            color: getComputedCSSProperty('color-success'),\n          },\n        },\n        pointer: {\n          show: false,\n        },\n        data: [\n          {\n            value: this.value,\n            detail: {\n              offsetCenter: [0, 0],\n              overflow: 'break',\n              fontSize: '2rem',\n              fontWeight: 'normal',\n              color: getComputedCSSProperty('color-soft-text'),\n              width: 250,\n              lineHeight: 35,\n              formatter: '{value} / 100 \\n completed',\n            },\n            pointer: {\n              show: false,\n            },\n          },\n        ],\n      },\n    ],\n  };\n\n  ngOnInit() {\n    registerTheme(echarts);\n\n    themeSwitcher.themeChanged.on((theme: string) => {\n      this.theme = theme;\n    });\n  }\n}\n"})})}function Z(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(X,{...e})}):X(e)}function $(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div\n  echarts\n  [options]="options"\n  [theme]="theme"\n  class="echarts-gauge"\n></div>\n'})})}function ee(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)($,{...e})}):$(e)}function ne(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts-gauge {\n  position: relative;\n  width: 100%;\n  height: 20rem;\n  padding-top: 3rem;\n}\n"})})}function te(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(ne,{...e})}):ne(e)}function re(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { getComputedCSSProperty, registerTheme } from '@siemens/ix-echarts';\nimport { themeSwitcher } from '@siemens/ix';\nimport VueECharts from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport * as charts from 'echarts/charts';\nimport * as components from 'echarts/components';\nimport * as renderer from 'echarts/renderers';\nimport { EChartsOption } from 'echarts';\n\necharts.use([\n  components.TooltipComponent,\n  components.LegendComponent,\n  components.GridComponent,\n  components.MarkLineComponent,\n  charts.GaugeChart,\n  renderer.CanvasRenderer,\n]);\n\nregisterTheme(echarts);\n\nconst theme = ref(themeSwitcher.getCurrentTheme());\n\nthemeSwitcher.themeChanged.on((newTheme: string) => {\n  theme.value = newTheme;\n});\n\nconst value = 60;\n\nconst options = {\n  series: [\n    {\n      id: '1',\n      type: 'gauge',\n      axisLine: {\n        show: true,\n        lineStyle: {\n          width: 15,\n          color: [[1, getComputedCSSProperty('color-neutral-40')]],\n        },\n      },\n      axisTick: {\n        show: false,\n      },\n      radius: '100%',\n      startAngle: 200,\n      endAngle: -20,\n      splitLine: {\n        show: false,\n      },\n      axisLabel: {\n        show: false,\n      },\n      progress: {\n        show: true,\n        overlap: false,\n        width: 35,\n        itemStyle: {\n          borderMiterLimit: 16,\n          color: getComputedCSSProperty('color-success'),\n        },\n      },\n      pointer: {\n        show: false,\n      },\n      data: [\n        {\n          value: value,\n          detail: {\n            offsetCenter: [0, 0],\n            overflow: 'break',\n            fontSize: '2rem',\n            fontWeight: 'normal',\n            color: getComputedCSSProperty('color-soft-text'),\n            width: 250,\n            lineHeight: 35,\n            formatter: '{value} / 100 \\n completed',\n          },\n          pointer: {\n            show: false,\n          },\n        },\n      ],\n    } as EChartsOption,\n  ],\n};\n<\/script>\n\n<style scoped src=\"./echarts-progress-arc.css\"></style>\n\n<template>\n  <VueECharts\n    :theme=\"theme\"\n    :option=\"options\"\n    autoresize\n    class=\"echarts-gauge\"\n  ></VueECharts>\n</template>\n"})})}function se(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(re,{...e})}):re(e)}function oe(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts-gauge {\n  position: relative;\n  width: 100%;\n  height: 20rem;\n  padding-top: 3rem;\n}\n"})})}function ae(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(oe,{...e})}):oe(e)}function ce(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ECharts progress arc example</title>\n    <link rel=\"stylesheet\" href=\"./echarts-progress-arc.css\" />\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"><\/script>\n    \n  </head>\n  <body class=\"theme-classic-dark\">\n    <div id=\"main\" class=\"echarts-gauge\"></div>\n\n    <script type=\"module\">\n      import {\n        getComputedCSSProperty,\n        registerTheme,\n      } from '@siemens/ix-echarts';\n      import { themeSwitcher } from '@siemens/ix';\n\n      function initChart(theme, options) {\n        var myChart = echarts.init(document.querySelector('#main'), theme);\n        myChart.setOption(options);\n\n        return myChart;\n      }\n\n      const value = 68;\n\n      const options = {\n        series: [\n          {\n            id: '1',\n            type: 'gauge',\n            axisLine: {\n              show: true,\n              lineStyle: {\n                width: 15,\n                color: [[1, getComputedCSSProperty('color-neutral-40')]],\n              },\n            },\n            axisTick: {\n              show: false,\n            },\n            radius: '100%',\n            startAngle: 200,\n            endAngle: -20,\n            splitLine: {\n              show: false,\n            },\n            axisLabel: {\n              show: false,\n            },\n            progress: {\n              show: true,\n              overlap: false,\n              width: 35,\n              itemStyle: {\n                borderMiterLimit: 16,\n                color: getComputedCSSProperty('color-success'),\n              },\n            },\n            pointer: {\n              show: false,\n            },\n            data: [\n              {\n                value: value,\n                detail: {\n                  offsetCenter: [0, 0],\n                  overflow: 'break',\n                  fontSize: '2rem',\n                  fontWeight: 'normal',\n                  color: getComputedCSSProperty('color-soft-text'),\n                  width: 250,\n                  lineHeight: 35,\n                  formatter: '{value} / 100 \\n completed',\n                },\n                pointer: {\n                  show: false,\n                },\n              },\n            ],\n          },\n        ],\n      };\n\n      // providing echarts is in this case optional\n      registerTheme(echarts);\n\n      var myChart = initChart(themeSwitcher.getCurrentTheme(), options);\n\n      themeSwitcher.themeChanged.on((theme) => {\n        myChart.dispose();\n        myChart = initChart(theme, options);\n      });\n\n      window.onresize = function () {\n        myChart.resize();\n      };\n    <\/script>\n\n    <script type=\"module\" src=\"./init.js\"><\/script>\n  </body>\n</html>\n"})})}function ie(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(ce,{...e})}):ce(e)}function le(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".echarts-gauge {\n  position: relative;\n  width: 100%;\n  height: 20rem;\n  padding-top: 3rem;\n}\n"})})}function he(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(le,{...e})}):le(e)}function pe(e){return(0,s.jsx)(a.A,{name:"echarts-progress-arc",source:{react:{"echarts-progress-arc.tsx":K,"echarts-progress-arc.scoped.css":B},angular:{"echarts-progress-arc.ts":Z,"echarts-progress-arc.html":ee,"echarts-progress-arc.css":te},vue:{"echarts-progress-arc.vue":se,"echarts-progress-arc.css":ae},html:{"echarts-progress-arc.html":ie,"echarts-progress-arc.css":he}},files:{react:{"echarts-progress-arc.tsx":"react/echarts-progress-arc.tsx","echarts-progress-arc.scoped.css":"react/echarts-progress-arc.scoped.css"},angular:{"echarts-progress-arc.ts":"angular/echarts-progress-arc.ts","echarts-progress-arc.html":"angular/echarts-progress-arc.html","echarts-progress-arc.css":"angular/echarts-progress-arc.css"},vue:{"echarts-progress-arc.vue":"vue/echarts-progress-arc.vue","echarts-progress-arc.css":"vue/echarts-progress-arc.css"},html:{"echarts-progress-arc.html":"html/echarts-progress-arc.html","echarts-progress-arc.css":"html/echarts-progress-arc.css"}},height:e.height,onlyFramework:e.onlyFramework})}function me(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(pe,{...e})}):pe(e)}const ue={},de=void 0,ge={},fe=[{value:"Development",id:"development",level:2},{value:"Metric gauge charts",id:"metric-gauge-charts",level:3},{value:"Circle gauge charts",id:"circle-gauge-charts",level:3},{value:"Arc gauge charts",id:"arc-gauge-charts",level:3},{value:"Dos and Don&#39;ts",id:"dos-and-donts",level:3}];function Ce(e){const n={h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,s.jsx)(n.p,{children:"Gauge charts are a type of chart that displays data using a dial or needle to indicate a value within a specific range. Gauge charts are commonly used to visualize performance metrics, such as speedometers, progress meters, and other KPIs. We typically use gauge charts to represent a single value within a range of values."}),"\n",(0,s.jsx)(n.h3,{id:"metric-gauge-charts",children:"Metric gauge charts"}),"\n",(0,s.jsx)(n.p,{children:"Metrics gauge charts, also known as dial or speedometer charts, are an effective way to visualize key performance indicators (KPIs) and other metrics. These charts indicate the current value of a metric within a predefined range, often segmented into different zones, e.g. red for poor performance, green for good performance, etc."}),"\n",(0,s.jsx)(b,{height:"25rem"}),"\n",(0,s.jsx)(n.h3,{id:"circle-gauge-charts",children:"Circle gauge charts"}),"\n",(0,s.jsx)(n.p,{children:"Circle gauge charts, also known as radial progress charts or circular progress bars, are a visually appealing way to represent data and track progress towards a goal. These charts use a circle to display the percentage of completion, making it easy to quickly grasp the status of a project or task. The circle is typically filled in proportion to the progress made, with the center often displaying the percentage value."}),"\n",(0,s.jsx)(Y,{height:"30rem"}),"\n",(0,s.jsx)(n.h3,{id:"arc-gauge-charts",children:"Arc gauge charts"}),"\n",(0,s.jsx)(n.p,{children:"Arc gauge charts, also known as semi-circular progress bars, are a dynamic way to visualize data and track progress. Unlike circle charts, arc gauge charts use a semi-circle or arc to represent the percentage of completion. This design can be particularly effective in dashboards and user interfaces where users need a clear and engaging visual representation but space is limited."}),"\n",(0,s.jsx)(me,{height:"30rem"}),"\n",(0,s.jsx)(n.h3,{id:"dos-and-donts",children:"Dos and Don'ts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Do keep it simple and easy to read, with a clear needle and well-defined ranges"}),"\n",(0,s.jsx)(n.li,{children:"Do use color coding, e.g. green for good, red for danger, etc. to indicate different ranges"}),"\n",(0,s.jsx)(n.li,{children:"Do label ranges and the needle value clearly to avoid  confusion"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t overcrowd the gauge with too many ranges or labels"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t use gauge charts for visualizing complex data or large datasets"}),"\n",(0,s.jsx)(n.li,{children:"Don\u2019t use similar colors for adjacent ranges to avoid confusion"}),"\n"]})]})}function we(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(Ce,{...e})}):Ce(e)}},26847:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"components/gauge-chart/index","title":"Gauge chart","description":"","source":"@site/docs/components/gauge-chart/index.mdx","sourceDirName":"components/gauge-chart","slug":"/components/gauge-chart/","permalink":"/version-alpha/docs/components/gauge-chart/","draft":false,"unlisted":false,"editUrl":"https://github.com/siemens/ix/tree/main/packages/documentation/docs/components/gauge-chart/index.mdx","tags":[],"version":"current","frontMatter":{"doc-type":"component","component-tabs":["Code"],"description":"","title":"Gauge chart","no_single_tab":true,"deprecated":null,"toc_min_heading_level":2,"toc_max_heading_level":5},"sidebar":"components","previous":{"title":"Bar chart","permalink":"/version-alpha/docs/components/bar-chart/"},"next":{"title":"Pie chart","permalink":"/version-alpha/docs/components/pie-chart/"}}');var s=t(65723),o=t(65598),a=t(16619),c=t(43640);const i={"doc-type":"component","component-tabs":["Code"],description:"",title:"Gauge chart",no_single_tab:!0,deprecated:null,toc_min_heading_level:2,toc_max_heading_level:5},l="",h={},p=[...a.toc];function m(e){const n={h1:"h1",header:"header",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:""})}),"\n",(0,s.jsx)(c.A,{children:(0,s.jsx)(a.default,{})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},62029:(e,n,t)=>{t.d(n,{_:()=>c,u:()=>i});var r=t(22155),s=t(94931),o=t(65723);const a=r.createContext(null);function c(e){let{children:n,content:t}=e;const s=function(e){return(0,r.useMemo)((()=>({metadata:e.metadata,frontMatter:e.frontMatter,assets:e.assets,contentTitle:e.contentTitle,toc:e.toc})),[e])}(t);return(0,o.jsx)(a.Provider,{value:s,children:n})}function i(){const e=(0,r.useContext)(a);if(null===e)throw new s.dV("DocProvider");return e}},43640:(e,n,t)=>{t.d(n,{A:()=>i,M:()=>c});var r=t(62029),s=t(62934),o=t(22155),a=t(65723);function c(){const{metadata:e}=(0,r.u)(),n=(0,s.zy)(),[t,a]=(0,o.useState)(null),[c,i]=(0,o.useState)(null),[l,h]=(0,o.useState)(null),[p,m]=(0,o.useState)(0),[u]=(0,o.useState)(new URLSearchParams(n.search));return(0,o.useEffect)((()=>{const t=e.frontMatter["component-tabs"],r=new URLSearchParams(n.search),s=r.has("current-tabs"),o=r.get("current-tabs");i(t),h(o),a(s)}),[n,n.search,e]),(0,o.useEffect)((()=>{if(null===t||!c)return void m(-1);const e=c.findIndex((e=>e===l));m(e)}),[t,c,m,l]),{componentTabs:c,searchParams:u,hasQueryString:t,currentTab:l,currentIndex:p}}function i(e){const{componentTabs:n,hasQueryString:t,currentTab:r}=c(),[s,i]=(0,o.useState)((()=>Array.isArray(e.children)?e.children[0]:e.children));return(0,o.useEffect)((()=>{if(!n)return;const t=n.findIndex((e=>e===r));Array.isArray(e.children)?i(e.children[t]):i(e.children)}),[n,e.children]),(0,a.jsx)("div",{children:s})}}}]);